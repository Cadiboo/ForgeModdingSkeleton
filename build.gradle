buildscript {
  repositories {
    jcenter()
    maven {
      name = 'forge'
      url = 'http://files.minecraftforge.net/maven'
    }
    maven {
      name = 'gradle'
      url 'https://plugins.gradle.org/m2/'
    }
    maven {
      name = 'sonatype'
      url = 'https://oss.sonatype.org/content/groups/public'
    }
  }
  dependencies {
    classpath "net.minecraftforge.gradle:${project.fg_version}"
//  classpath 'org.junit.platform:junit-platform-gradle-plugin:1.2.+'
//  classpath 'com.jaredsburrows:gradle-checker-framework-plugin:0.2.1'
  }
}

plugins {
//id 'com.github.spotbugs' version '1.6.2'
  id 'com.matthewprenger.cursegradle' version '1.0.11'
  id 'org.sonarqube' version '2.6.2'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven-publish'
apply plugin: 'org.sonarqube'
//apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'jacoco'
//apply plugin: 'com.github.spotbugs'
//apply plugin: 'com.jaredsburrows.checkerframework'

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  testCompile('org.junit.jupiter:junit-jupiter-api:5.2.+')
// Only used for JUnit Platform Launcher 1.2.0 and earlier
//testCompile('org.junit.platform:junit-platform-launcher:1.2.+')
  testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.+')
  testCompile('org.mockito:mockito-core:2.+')
}

// TODO: Fix this for JUnit Platform Launcher 1.3
project.afterEvaluate {
//  def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

  // configure jacoco to analyze the junitPlatformTest task
  jacoco {
    // this tool version is compatible with
    toolVersion = '0.8.1'
//    applyTo junitPlatformTestTask
  }

  // create junit platform jacoco task
  project.task(type: JacocoReport, "junitPlatformJacocoReport",
  {
    sourceDirectories = files("./src/main")
    classDirectories = files("${project.buildDir}/classes/main")
//    executionData junitPlatformTestTask
  })
}

// Only used for JUnit Platform Launcher 1.2.0 and earlier
/*
junitPlatform {
  // platformVersion '1.2.0'
  // logManager 'org.apache.logging.log4j.jul.LogManager'
  reportsDir file("${project.buildDir}/test-results/junit-platform")
  // enableStandardTestTask true
  // selectors (optional)
  // filters (optional)
}
*/

/*
spotbugs {
  toolVersion = '3.1.6'
}
*/

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  options.compilerArgs = [
    '-Xlint:deprecation', // deprecation, rawtypes, cast, unchecked, all
//  '-Xdiags:verbose',
//  '-Werror'
  ]
}

javadoc {
  failOnError = false
}

test {
  useJUnitPlatform()
/*
  useJUnitPlatform {
    includeTags 'fast', 'smoke & feature-a'
//  excludeTags 'slow', 'ci'
    includeEngines 'junit-jupiter'
//  excludeEngines 'junit-vintage'
  }
*/
}

//ext.short_version = '1.0.0'
//ext.short_version = getVersion('VERSION', <path to file containing version string)
ext.short_version = getVersion('VERSION', getModFile())
version = mc_version + '-' + short_version
ext.display_version = short_version

if ((System.getenv('BUILD_NUMBER')) || (System.getenv('TRAVIS_BUILD_NUMBER')) || (System.getenv('CIRCLE_BUILD_NUM'))) {
  version += '.' + getBuildNumber()
  display_version += '.' + getBuildNumber()
}

String getBuildNumber() {
  return System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : System.getenv('TRAVIS_BUILD_NUMBER') ? System.getenv('TRAVIS_BUILD_NUMBER') : System.getenv('CIRCLE_BUILD_NUM') ? System.getenv('CIRCLE_BUILD_NUM') : '0';
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

eclipse.project {
  buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
  natures 'org.eclipse.buildship.core.gradleprojectnature'
}

class Secrets {
  def data = null

  def getProperty(String key) {
    return data ? data[key] : ''
  }
}

import groovy.json.JsonSlurper

def secretFile
if (System.getenv('SECRET_FILE')) {
  secretFile = file System.getenv().SECRET_FILE
} else {
  secretFile = file 'secret.json'
}

ext.secret = new Secrets()
if (secretFile.exists()) {
  secretFile.withReader {
    project.secret.data = new JsonSlurper().parse it
  }
}

minecraft {
  version = project.forge_mc_version + '-' + project.forge_version
  runDir = 'run'
  mappings = project.mcp_mappings

  replace '@MOD_VERSION@', project.short_version

  if ((project.hasProperty('signSHA1')) && (project.hasProperty('sign_jar'))) {
    replace '@FINGERPRINT@', project.findProperty('signSHA1')
  } else {
    replace '@FINGERPRINT@', ''
  }

  if (project.hasProperty('coreplugin')) {
    clientJvmArgs += '-Dfml.coreMods.load=' + project.core_plugin
    serverJvmArgs += '-Dfml.coreMods.load=' + project.core_plugin
  }

  if (project.hasProperty('mc_username')) {
    clientRunArgs += ['--username', project.mc_username]
    if (project.hasProperty('mc_password')) {
      clientRunArgs += ['--password', project.mc_password]
    }
  }
  if (project.hasProperty('mc_uuid')) {
    clientRunArgs += ['--uuid', project.mc_uuid]
  }

  if (project.hasProperty('mc_server_nogui')) {
    serverRunArgs += 'nogui'
  }

  if (project.hasProperty('forge_do_not_backup')) {
    serverJvmArgs += '-Dfml.doNotBackup=true'
    clientJvmArgs += '-Dfml.doNotBackup=true'
  }

  if (project.hasProperty('forge_query_result_confirm')) {
    serverJvmArgs += '-Dfml.queryResult=confirm'
  }

  if (project.hasProperty('log4j_skip_jansi')) {
    serverJvmArgs += '-Dlog4j.skipJansi=true'
    clientJvmArgs += '-Dlog4j.skipJansi=true'
  }

  if (project.hasProperty('mc_resolution') {
    def res = [ '480p': [ 640, 480 ], '576p': [ 640, 576 ], '720p': [ 1280, 720 ], '1080p': [ 1920, 1080 ], 'custom': [ $project.mc_custom_resolution_width, $project.mc_custom_resolution_height ] ]
    def choice = res?.get($project.mc_resolution)
    if( choice != null ) {
        clientRunArgs += '--width', choice[0]
        clientRunArgs += '--height', choice[1]
    }
  }

  if (project.hasProperty('client_jvm_args')) {
    clientJvmArgs += project.client_jvm_args
  }
  if (project.hasProperty('server_jvm_args')) {
    serverJvmArgs += project.server_jvm_args
  }

  if (project.hasProperty('client_game_args')) {
    clientRunArgs += project.client_game_args
  }
  if (project.hasProperty('server_game_args')) {
    serverRunArgs += project.server_game_args
  }

  if (!project.hasProperty('create_source_jar')) {
    makeObfSourceJar = false
  }
  if (project.hasProperty('dep_has_ats')) {
    useDepAts = project.dep_has_ats
  }
}

repositories {
  maven {
    name 'MMD'
    url 'https://maven.mcmoddev.com/'
  }
}

dependencies {
}

processResources {
  inputs.property 'version', project.short_version
  inputs.property 'mcversion', project.minecraft.version

  from (sourceSets.main.resources.srcDirs) {
    include 'mcmod.info'
    expand 'version': project.short_version, 'mcversion': project.minecraft.version
  }

  from (sourceSets.main.resources.srcDirs) {
    exclude 'mcmod.info'
  }

  rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
  //from sourceSets.api.output
  //from sourceSets.main.output

  manifest {
    attributes 'Maven-Artifact' : "${project.group}:${project.archivesBaseName}:${project.version}"
    attributes 'Timestamp' : System.currentTimeMillis()
    if (project.hasProperty('coreplugin')) {
      attributes 'FMLCorePluginContainsFMLMod': 'true'
      attributes 'FMLCorePlugin': project.core_plugin
    }
    if (project.hasProperty('at_file')) {
      attributes 'FMLAT' : project.at_file
    }
  }
}

task apiJar(type: Jar) {
  classifier = 'apiClasses'
  from apiClasses
  // from sourceSets.api.output
}

task deobfJar(type: Jar) {
  classifier = 'deobf'
  from sourceSets.main.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.getDestinationDir()
}

task signJar(type: SignJar, dependsOn: reobfJar) {
  onlyIf {
    project.hasProperty('keyStore')
  }

  inputFile = jar.archivePath
  outputFile = jar.archivePath

  keyStore = project.findProperty('keyStore')
  alias = project.findProperty('keyStoreAlias')
  storePass = project.findProperty('keyStorePass')
  keyPass = project.findProperty('keyStoreKeyPass')
}

if (project.hasProperty('sign_jar')) {
  build.dependsOn signJar
}

artifacts {
  if (project.hasProperty('create_api_jar')) {
    archives apiJar
  }
  if (project.hasProperty('create_deobf_jar')) {
    archives deobfJar
  }
  if (project.hasProperty('create_source_jar')) {
    archives sourceJar
  }
  if (project.hasProperty('create_javadoc_jar')) {
    archives javadocJar
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId project.group
      artifactId project.archivesBaseName
      version project.version
      from components.java
      if (project.hasProperty('create_source_jar')) {
        artifact sourceJar {
          classifier 'sources'
        }
      }
      if (project.hasProperty('create_api_jar')) {
        artifact apiJar {
          classifier 'api'
        }
      }
      if (project.hasProperty('create_deobf_jar')) {
        artifact deobfJar {
          classifier 'deobf'
        }
      }
      if (project.hasProperty('create_javadoc_jar')) {
        artifact javadocJar {
          classifier 'javadoc'
        }
      }
    }
  }
  repositories {
    maven {
      credentials {
        username secret.username
        password secret.password
      }
      url secret.url
    }
  }
}

curseforge {
  if (project.hasProperty('cf_project_id') && project.hasProperty('cf_release_type') && project.hasProperty('cf_changelog_filename') &&
      ((project.cf_release_type == 'alpha') || (project.cf_release_type == 'beta') || (project.cf_release_type == 'release'))) {
    apiKey = secret.curseforgeAPIKey
    project {
      id = project.cf_project_id
      // A list of changes for the current build. This can be a String or a File. If a file is set, its contents will be used. This is a required field.
      changelog = file(project.cf_changelog_filename)
      // The type of changelog. This can be: text, html, or markdown. The default is text.
      if (project.hasProperty('cf_changelog_type')) {
        changelogType = project.cf_changelog_type
      }
      releaseType = project.cf_release_type
      if (project.hasProperty('cf_versions')) {
        def versions = "${property.cf_versions}".split(', ')
        versions.each {
          addGameVersion "${it}"
        }
      }
      mainArtifact(jar) {
        if (project.hasProperty('cf_use_custom_display_name')) {
          displayName = "${project.description} ${project.display_version}"
        }
        if (project.hasProperty('cf_requirements') || project.hasProperty('cf_optionals') || project.hasProperty('cf_embeddeds') || project.hasProperty('cf_tools') || project.hasProperty('cf_incompatibles') || project.hasProperty('cf_includes')) {
          relations {
            if (project.hasProperty('cf_requirements')) {
              def requirements = "${project.cf_requirements}".split(', ')
              requirements.each {
                requiredLibrary "${it}"
              }
            }
            if (project.hasProperty('cf_optionals')) {
              def optionals = "${project.cf_optionals}".split(', ')
              optionals.each {
                optionalLibrary "${it}"
              }
            }
            if (project.hasProperty('cf_embeddeds')) {
              def embeddeds = "${project.cf_embeddeds}".split(', ')
              embeddeds.each {
                embeddedLibrary "${it}"
              }
            }
            if (project.hasProperty('cf_tools')) {
              def tools = "${project.cf_tools}".split(', ')
              tools.each {
                tool "${it}"
              }
            }
            if (project.hasProperty('cf_incompatibles')) {
              def incompatibles = "${project.cf_incompatibles}".split(', ')
              incompatibles.each {
                incompatible "${it}"
              }
            }
            if (project.hasProperty('cf_includes')) {
              def includes = "${project.cf_includes}".split(', ')
              includeds.each {
                include "${it}"
              }
            }
          }
        }
      }
      if (project.hasProperty('create_api_jar')) {
        addArtifact(apiJar) {
          if (project.hasProperty('cf_use_custom_display_name')) {
            displayName = "${project.description} ${project.display_version} API"
          }
        }
      }
      if (project.hasProperty('create_source_jar')) {
        addArtifact(sourceJar) {
          if (project.hasProperty('cf_use_custom_display_name')) {
            displayName = "${project.description} ${project.display_version} Sources"
          }
        }
      }
      if (project.hasProperty('create_deobf_jar')) {
        addArtifact(deobfJar) {
          if (project.hasProperty('cf_use_custom_display_name')) {
            displayName = "${project.description} ${project.display_version} Development"
          }
        }
      }
      if (project.hasProperty('create_javadoc_jar')) {
        addArtifact(javadocJar) {
          if (project.hasProperty('cf_use_custom_display_name')) {
            displayName = "${project.description} ${project.display_version} Javadoc"
          }
        }
      }
    }
  }
}

sonarqube {
  properties {
    property 'sonar.host.url', secret.sonarHost
    property 'sonar.organization', secret.sonarOrganization
    property 'sonar.login', secret.sonarToken
    // property 'sonar.projectName', project.archivesBaseName
    // property 'sonar.projectKey', "${project.group}:${project.archivesBaseName}"
    // property 'sonar.branch.name', 'master-1.12'
    // property 'sonar.branch.target', ''
    property 'sonar.junit.reportPaths', "${project.buildDir}/test-results/junit-platform/*.xml"
    property 'sonar.jacoco.reportPaths', "${project.buildDir}/jacoco/junitPlatformTest.exec"
  }
}

String getModFile() {
  String path = ''
  FileTree tree = fileTree(dir: 'src/main/java')
  tree.include '**/*.java'
  tree.visit { element ->
    if (element.file.isFile()) {
      element.file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith('@Mod(')) {
          path = "src/main/java/$element.relativePath"
        }
      }
    }
  }
  return path
}

String getVersion(String type, String mod_file) {
  String major = '0'
  String revision = '0'
  String patch = '0'
  File file = file(mod_file)
  def prefix = ~/^(?:public|protected|private) static final String $type = ".*$/
  file.eachLine { String s ->
    s = s.trim()
    if (s ==~ prefix || prefix.matcher(s).matches()) {
      String[] bits = s.split("=")
      String interesting = bits[1].trim()
      interesting = interesting.substring(1, interesting.length() - 2)
      String[] pts = interesting.trim().split("\\.")

      major = pts[0] ?: '0'
      revision = pts[1] ?: '0'
      patch = pts[2] ?: '0'
    }
  }
  return "$major.$revision.$patch"
}
